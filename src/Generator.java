/**
 * PROJECT: Sudoku Puzzle
 *
 * CLASS: Generator
 *
 * DESCRIPTION: This class has one public method, generateSudoku, which returns a randomly generated sudoku puzzle, and
 *              writes that puzzle to an external text file, which will later be used to populate a Sudoku grid.
 *
 * DATE: November 2015
 *
 * AUTHOR: Lush Sleutsky
 *
 * IDE: IntelliJ IDEA 15.0.1
 */

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;
import java.util.ArrayList;

public class Generator {

    // set unchangeable number of rows to 9
    private static final int ROWS = 9;
    // set unchangeable number of columns to 9
    private static final int COLUMNS = 9;

    /**
     * generateSudoku is called to create and return a new random sudoku puzzle.
     * @return will return the sudoku puzzle that has been generated.
     */
    public static int[][] generateSudoku() {
        // a 9x9 array to hold the sudoku puzzle
        int[][] sudoku = new int[9][9];

        // calls the find method with the initially empty array, and the starting position of (0,0)
        sudoku = findValues(sudoku, 0, 0);

        // returns the sudoku puzzle generated by the find method
        return sudoku;
    } // end generateSudoku

    /**
     * findValues is a recursive method which generates and returns a sudoku puzzle using the initial values passed to
     * it by the generateSudoku method.
     * @param array an array containing what has so far been generated of the sudoku puzzle.
     * @param row the row position of the current cell being populated.
     * @param column the column position of the current cell being populated.
     * @return will return 'null' if no valid numbers exist for the current cell.
     *         will return the completed sudoku puzzle if a solution has been found.
     */
    private static int[][] findValues(int[][] array, int row, int column) {

        // keeps track of the numbers that are invalid for the current position of the sudoku puzzle
        ArrayList<String> invalidNumbers = new ArrayList<String>();

        // keeps track of the numbers that are valid for the current position of the sudoku puzzle
        ArrayList<String> validNumbers = new ArrayList<String>();

        // holds the array created by adding a valid number to the old array
        int[][] newArray = new int[9][9];
        // holds the completed sudoku puzzle when found
        int[][] solution = null;

        // flag for indicating whether the number created by the random number generator has already been tried
        boolean newNumber;

        /* flag for indicating whether the number created by the random number generator is valid for the current
         position of the sudoku puzzle */
        boolean validNumber;

        // stores a random number
        int number;

        // the starting row position of the current 3x3 block of the sudoku puzzle
        int startRow;
        // the starting column position of the current 3x3 block of the sudoku puzzle
        int startColumn;

        // the row of the next position to be filled in the sudoku puzzle
        int newRow;
        // the column of the next position to be filled in the sudoku puzzle
        int newColumn;

        // random number generating object
        Random numberGenerator = new Random();

        /* this code checks the numbers 1 through 9 to determine what numbers are valid for the current position in the
         sudoku */
        while (invalidNumbers.size() + validNumbers.size() < 9) {
            // a new random number from 1 through 9 is assigned to 'number'
            number = numberGenerator.nextInt(9) + 1;
            // new number flag is initially true
            newNumber = true;

            // check over the array of invalid numbers
            for (String element : invalidNumbers) {
                // if 'number' already exists in the set of invalid numbers found
                if (number == Integer.parseInt(element)) {
                    //the newNumber flag is set to false
                    newNumber = false;
                }
            }

            // check over the array of valid numbers
            for(String element : validNumbers) {
                // if 'number' already exists in the set of valid numbers found
                if(number == Integer.parseInt(element))
                    // the newNumber flag is set to false
                    newNumber = false;
            }

            /* if 'number' hasn't already been checked, this code runs to check whether 'number' is a valid number
             for the current position in the sudoku */
            if (newNumber) {
                // validNumber flag initially set to true
                validNumber = true;

                // check the rows of the sudoku
                for (int currentRows = 0; currentRows < ROWS; currentRows++) {
                    // if 'number' already exists in the current row of the sudoku
                    if (array[column][currentRows] == number)
                        // validNumber is set to false
                        validNumber = false;
                }

                // check the columns of the sudoku
                for (int currentColumns = 0; currentColumns < 9; currentColumns++) {
                    // if 'number' already exist in the current column of the sudoku
                    if (array[currentColumns][row] == number)
                        // validNumber is set to false
                        validNumber = false;
                }

                /* check to see what 3x3 block the current position in the sudoku belongs to, and set the startX
                 and startY variables to the upper left coordinate of that 3x3 block */
                if (column < 3)
                    startColumn = 0;
                else if (column < 6)
                    startColumn = 3;
                else
                    startColumn = 6;

                if (row < 3)
                    startRow = 0;
                else if (row < 6)
                    startRow = 3;
                else
                    startRow = 6;

                /* check to see whether 'number' already exists in any of the cells of the current 3x3 block of the
                 sudoku, and if so, set validNumber to false */
                // check the cells in each row
                for (int checkColumn = startColumn; checkColumn < startColumn + 3; checkColumn++) {
                    // check the cells in each column
                    for (int checkRow = startRow; checkRow < startRow + 3; checkRow++) {
                        // if number being searched for is found
                        if (array[checkColumn][checkRow] == number)
                            // set validNumber to false
                            validNumber = false;
                    } // end checking columns
                } // end checking rows

                // if 'number' is valid for the current position in the sudoku
                if (validNumber) {
                    // add parsed 'number' to 'validNumbers' list
                    validNumbers.add(Integer.toString(number));
                  // otherwise if 'number' is invalid for the current position of the sudoku
                } else {
                    // and parsed 'number' to 'invalidNumbers' list
                    invalidNumbers.add(Integer.toString(number));
                }
            }
        }

        // initially set the new x coordinate of the next cell of the sudoku to the current x and y coordinates
        newRow = row;
        // initially set the new y coordinate of the next cell of the sudoku to the current x and y coordinates
        newColumn = column;

        // advance the coordinates of the next cell of the sudoku by one space
        if(row == 8) {
            newRow = 0;
            newColumn++;
        } else {
            newRow++;
        }

        // rows
        for(int currentRows = 0; currentRows < ROWS; currentRows++) {
            // columns
            for(int currentColumns = 0; currentColumns < COLUMNS; currentColumns++) {
                // copy the elements of 'array' to 'newArray'
                newArray[currentRows][currentColumns] = array[currentRows][currentColumns];
            } // end columns
        } // end rows

        // this code runs as long as there is another valid number to try or a solution is found
        for(int i = 0; i < validNumbers.size() && solution == null; i++) {
            // on each iteration, newArray is assigned the next valid number in 'validNumbers'
            newArray[column][row] = Integer.parseInt(validNumbers.get(i));

            // as long as every cell in the sudoku has not yet been populated
            if(row != 8 || column != 8)
                    // the find method is called to find the next cell in the sudoku
                    solution = findValues(newArray, newRow, newColumn);

            // once every cell in the sudoku has been populated
            else {
                // this finished sudoku puzzle is assigned to 'solution'
                solution = newArray;
            }
        }
        /* if a solution has been found before every possible number has been tried, each instance of the find method
         receives and returns the finished sudoku puzzle, until the original method call receives the solution.
         Otherwise, each instance of the 'find' method receives and returns 'null', until an instance of the 'find'
         method is reached that has another valid number to try */
        return solution;
    } // end find

    /**
     * This method writes the completed puzzle to an external file.
     * @param array this is the completed puzzle that will be written to an external file.
     */
    public static void writeToFile(int[][] array) {
        try {
            // set generated sudoku puzzle to an array
            int[][] anArray = generateSudoku();
            // write the puzzle to an external text file
            PrintWriter addToFile = new PrintWriter(new FileWriter("generated.txt"));
            // write the rows
            for (int rows = 0; rows < 9; rows++) {
                // hold the string of numbers that is written to the file
                String writeNumbers = "";
                // write the columns
                for (int columns = 0; columns < 9; columns++) {
                    // write numbers to the file, with a "space" as a separator
                    writeNumbers += anArray[rows][columns] + " ";
                } // end writing columns
                // add the string of numbers to the output file
                addToFile.println(writeNumbers);
            } // end writing rows
            // close file being written
            addToFile.close();
        } catch (IOException ex) {
            // if there is an error during the writing to file process, print the error
            System.out.println(ex.toString());
        }
    } // end writeToFile

} // end class Generator